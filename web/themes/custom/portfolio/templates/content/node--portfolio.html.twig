{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}

{% set conLabel %}
{{- label|raw -}}
{% endset %}

{{ attach_library('classy/node') }}

{% if view_mode == 'full' %}
	<article{{attributes.addClass(classes)}}>
		<div class="column-info"></div>
		<div class="column-content">
			<section class="main-section">
				<div class="desktop-info">
					<svg width="320" height="460" viewbox="0 0 320 460" fill="none" xmlns="http://www.w3.org/2000/svg">
						<path id="desktop-info-line" d="M5 94.3016V5H315V455H176" stroke="black" stroke-width="10"/>
					</svg>
					{% if breadcrumbs %}
						<div class="breadcrumbs-wrapper">
							{{ breadcrumbs }}
						</div>
					{% endif %}
					<div class="desktop-info-content-wrapper underline">
						<h2 class="">Portfolio detale</h2>
					</div>
				</div>
				<div class="container">
					<div class="row">
						<div class="col-12 col-lg-10 offset-lg-2 page-title-wrapper">
							{% if content.field_short_text[0] is not empty %}
								<p class="yellow-subtitle">{{ content.field_short_text }}</p>
							{% endif %}
							<h1 class="page-title underline">
								{{ conLabel|striptags }}
							</h1>
							{% if breadcrumbs %}
								<div class="breadcrumbs-mobile-wrapper">
									{{ breadcrumbs }}
								</div>
							{% endif %}
						</div>
						<div class="col-12 col-lg-5 offset-lg-2">
							{% if content.field_long_text[0] is not empty %}
								<div class="project-intro">{{ content.field_long_text }}</div>
							{% endif %}
							{% if content.field_long_text_2[0] is not empty %}
								<div class="project-informations">{{ content.field_long_text_2 }}</div>
							{% endif %}
							{% if content.field_single_link[0] is not empty or content.field_single_link_2[0] is not empty %}
								<div class="links-wrapper">
									{% if content.field_single_link[0] is not empty %}
										<a href="{{ content.field_single_link[0]['#url']|render }}" class="primary-button">{{ content.field_single_link[0]['#title']|render }}</a>
									{% endif %}
									{% if content.field_single_link_2[0] is not empty %}
										<a href="{{ content.field_single_link_2[0]['#url']|render }}" class="primary-button">{{ content.field_single_link_2[0]['#title']|render }}</a>
									{% endif %}
								</div>
							{% endif %}
						</div>
						<div class="col-12 col-lg-4 offset-lg-1">
							{% if content.field_single_image[0] is not empty %}
								<div class="project-image">{{ content.field_single_image }}</div>
							{% endif %}
						</div>
						<div class="col-12 col-lg-10 offset-lg-2">
							{% if content.body[0] is not empty %}
								<div class="project-body">{{ content.body }}</div>
							{% endif %}
						</div>
					</div>
				</div>
			</section>
			<section id="contact" class="webform">
				{{webform }}
			</section>
		</div>
		<div class="column-social"></div>
	</article>
{% elseif view_mode == 'teaser' %}
	<article{{attributes.addClass(classes,content.field_tax_ref[0]['#title'])}}>
		<a href="{{ path('entity.node.canonical', {'node': node.id}) }}">
			<div class="portfolio-item">
				<div class="portfolio-item-image">
					{{ content.field_single_image }}
				</div>
				<h3 class="portfolio-item-title underline">
					{{ conLabel|striptags }}
				</h3>
				<p>{{ content.field_short_text }}</p>
			</div>
		</a>
	</article>
{% endif %}
